tests_common_setup: &tests_common_setup
  docker:
    - image: overhangio/openedx:11.3.1
    - image: circleci/mongo:3.6-xenial
  environment:
    - NO_PREREQ_INSTALL: "true"
    - SERVICE_VARIANT: ""
  working_directory: /openedx/edx-platform

tests_common_steps: &tests_common_steps
  - run: &ubuntu_dependencies
      name: Install ubuntu dependencies
      command: |
        curl -fsSL https://www.mongodb.org/static/pgp/server-3.6.asc | apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/3.6 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.6.list
        apt update
        apt install -y mongodb-org-shell=3.6.20
        DEBIAN_FRONTEND=noninteractive apt -yq install xvfb libasound2 libstartup-notification0
        apt install firefox -y
  - run: &python_requirements
      name: Install testing requirements
      command: pip install -r requirements/edx/testing.txt

version: 2.1

workflows:
  build:
    jobs:
      - lms_unit_tests:
          filters:
            branches:
              only: eric/distro_fix_tests
      # - cms_unit_tests:
      #     filters:
      #       branches:
      #         only: eric/distro_fix_tests
      # - lib_unit_tests:
      #     filters:
      #       branches:
      #         only: eric/distro_fix_tests
      # - javascript_tests:
      #     filters:
      #       branches:
      #         only: eric/distro_fix_tests
      # - quality_tests:
      #     filters:
      #       branches:
      #         only: eric/distro_fix_tests
      # - build_edxapp_image:
      #     filters:
      #       branches:
      #         only: Gonzalo/tutor_test

jobs:
  lms_unit_tests:
    <<: *tests_common_setup
    parallelism: 5
    steps:
      - checkout
      - run: *ubuntu_dependencies
      - run: *python_requirements
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: |
            TEST_FILES=$(circleci tests glob \
              "lms/djangoapps/*" \
              "common/djangoapps/*" \
              "openedx/core/djangoapps/*" \
              "openedx/tests/*" \
              "openedx/core/lib/*" \
              "lms/lib/*" \
              "lms/tests.py" \
              "openedx/core/djangolib/*" \
              "openedx/core/tests/*" \
              "openedx/features" \
              | sed '/pycache/d' | sed '/coveragerc/d' \
              | circleci tests split --split-by=timings)
            python -Wd -m pytest --ds=lms.envs.test --junitxml=/openedx/edx-platform/reports/lms/tests.xml -p no:randomly $TEST_FILES
      - store_test_results:
          path: reports/lms/tests.xml
      - store_artifacts:
          path: reports/lms/tests.xml

  cms_unit_tests:
    <<: *tests_common_setup
    steps:
      - checkout
      - run: *ubuntu_dependencies
      - run: *python_requirements
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: paver test_system -s cms --cov-args="-p"

  lib_unit_tests:
    <<: *tests_common_setup
    steps:
      - checkout
      - run: *ubuntu_dependencies
      - run: *python_requirements
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: paver test_lib --cov-args="-p"

  javascript_tests:
    <<: *tests_common_setup
    steps:
      - checkout
      - run: *ubuntu_dependencies
      - run: *python_requirements
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: xvfb-run --server-args="-screen 0 1280x1024x24" paver test_js --coverage

  quality_tests:
    <<: *tests_common_setup
    steps:
      - checkout
      - run: *ubuntu_dependencies
      - run: *python_requirements
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: CIRCLE_NODE_TOTAL=workflows CIRCLE_NODE_INDEX=0 ./scripts/all-tests.sh



  build_edxapp_image:
    docker:
      - image: edxops/focal-common:latest
    environment:
      TUTOR_ROOT: "tmp/tutor_build/tutor_root/tutor\nexport"
      TUTOR_PLUGINS_ROOT: "/tmp/tutor_build/tutor_root/tutor-plugins"

    steps:

      - run:
          name: Installing Docker CLI
          command: |
            apt update
            apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt install docker-ce-cli=5:19.03.13~3-0~ubuntu-focal -y
    

      - run:
          name: Prepare tutor_distro environment
          command: |
            mkdir -p /tmp/tutor_build /tmp/tutor_build/tutor_root/tutor
            cd /tmp/tutor_build
            git clone -b v11.2.9 https://github.com/overhangio/tutor.git
            cd tutor && pip install -e . && cd ..
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" pip install git+ssh://git@bitbucket.org/edunext/plugin-distro-ednx.git@stage#egg=plugin-distro-ednx==stage

      - run:
          name: Enable tutor_distro plugins
          working_directory: /tmp/tutor_build
          command: |
            tutor plugins enable distro_ednx

      - run:
          name: Creating tutor config
          working_directory: /tmp/tutor_build
          command: |
            tutor plugins list
            tutor config save

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true

      - run:
          name: Building openedx image with tutor_distro
          working_directory: /tmp/tutor_build
          command: |
            main_repo_url="<< pipeline.project.git_url >>.git"
            main_repo_branch="<< pipeline.git.branch >>"
            tutor images build openedx --build-arg EDX_PLATFORM_REPOSITORY=$main_repo_url --build-arg EDX_PLATFORM_VERSION=$main_repo_branch
      
      - run:
          name: Pushing openedx image to Docker Registry with tutor_distro
          working_directory: /tmp/tutor_build
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            tutor images push openedx

      - run:
          name: Building openedx dev image 
          working_directory: /tmp/tutor_build
          command: |
            tutor images build openedx-dev
            
      
      - run:
          name: Pushing openedx dev image to Docker Registry with tutor_distro
          working_directory: /tmp/tutor_build
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker push docker.io/ednxops/ednx_distro_edxapp_dev:latest
  